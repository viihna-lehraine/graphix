var S=o=>{throw TypeError(o)};var b=(o,r,e)=>r.has(o)||S("Cannot "+e);var g=(o,r,e)=>(b(o,r,"read from private field"),e?e.call(o):r.get(o)),l=(o,r,e)=>r.has(o)?S("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(o):r.set(o,e),y=(o,r,e,n)=>(b(o,r,"write to private field"),n?n.call(o,e):r.set(o,e),e),s=(o,r,e)=>(b(o,r,"access private method"),e);class k extends Error{constructor(r,e){super(r),this.userMessage=e,this.name="UserFacingError"}}const v={UserFacingError:k};var d,$,m,a,p,w;const u=class u{constructor(r){l(this,a);l(this,$,v);l(this,m);try{y(this,m,r)}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}static getInstance(r){try{return g(u,d)||(console.debug("No ErrorHandler instance exists yet. Creating new instance."),y(u,d,new u(r))),console.debug("Returning ErrorHandler instance."),g(u,d)}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}handleAndReturn(r,e,n={}){try{const t=r();return t instanceof Promise?t.catch(i=>(s(this,a,w).call(this,i,e,n),n.fallback??Promise.reject(i))):t}catch(t){return s(this,a,w).call(this,t,e,n),n.fallback}}async handleAsync(r,e,n={}){try{return await r()}catch(t){throw s(this,a,w).call(this,t,e,n),t}}handleSync(r,e,n={}){try{return r()}catch(t){throw s(this,a,w).call(this,t,e,n),t}}};d=new WeakMap,$=new WeakMap,m=new WeakMap,a=new WeakSet,p=function(r,e,n){try{return r instanceof Error?`${e}: ${r.message}. Context: ${JSON.stringify(n)}`:`${e}: ${r}. Context: ${JSON.stringify(n)}`}catch(t){throw new Error(`[Error formatting error message: ${t instanceof Error?t.message:t}`)}},w=function(r,e,n={}){try{const t=s(this,a,p).call(this,r,e,n.context??{});g(this,m).error(t);const i=n.userMessage??(r instanceof g(this,$).UserFacingError?r.userMessage:void 0);i&&alert(i)}catch(t){throw new Error(`Error handling error: ${t instanceof Error?t.message:t}`)}},l(u,d,null);let C=u;var f,c,F,I,E;const h=class h{constructor(r){l(this,c);try{r.app.noop()}catch(e){throw new Error(`constructor]: ${e instanceof Error?e.message:e}`)}}static getInstance(r){try{return g(h,f)||(y(h,f,new h(r)),console.log("No existing Logger instance found. Creating new instance.")),console.log("Returning Logger instance."),g(h,f)}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}debug(r,e){s(this,c,E).call(this,r,"debug",e)}error(r,e){s(this,c,E).call(this,r,"error",e)}info(r,e){s(this,c,E).call(this,r,"info",e)}warn(r,e){s(this,c,E).call(this,r,"warn",e)}};f=new WeakMap,c=new WeakSet,F=function(){return new Date().toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1})},I=function(r){switch(r){case"debug":return"color: green";case"info":return"color: blue";case"warn":return"color: orange";case"error":return"color: red";default:return"color: black"}},E=function(r,e,n){const t=n,i=s(this,c,F).call(this);try{console.log(`%c[${e.toUpperCase()}]%c ${i} [${t}] %c${r}`,s(this,c,I).call(this,e),"color: gray","color: inherit")}catch(U){console.error(`[${n}.#logMessage]: Encountered an unexpected error: ${U}.`)}t==="Unknown caller"&&console.trace(`[${n}]: Full Stack Trace:`)},l(h,f,null);let x=h;function L(o){console.log("Starting service factory...");const r={};if(console.log("Initializing Logger and ErrorHandler services"),r.log=x.getInstance(o),r.errors=C.getInstance(r.log),!r.log||!r.errors)throw new Error("Logger and/or ErrorHandler failed to initialize.");return r}export{L as serviceFactory};
