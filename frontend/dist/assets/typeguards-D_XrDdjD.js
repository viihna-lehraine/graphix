const i=e=>({isFloat(r){return Number.isFinite(r)&&!Number.isInteger(r)},isFloatString(r){const t=r.trim();return!e.integerString.test(t.trim())&&e.numberString.test(t)},isInteger(r){return Number.isInteger(r)},isIntegerString(r){const t=r.trim();return e.integerString.test(t)},isNonNegativeInteger(r){return Number.isInteger(r)&&r>=0},isNonNegativeNumber(r){return Number.isFinite(r)&&r>=0},isNonZeroInteger(r){return Number.isInteger(r)&&r!==0},isNonZeroNumber(r){return Number.isFinite(r)&&r!==0},isPercentile(r){return Number.isFinite(r)&&r>=0&&r<=100},isPositiveInteger(r){return Number.isInteger(r)&&r>0},isPositiveNumber(r){return Number.isFinite(r)&&r>0},isSignedPercentile(r){return Number.isFinite(r)&&r>=-100&&r<=100},isUnitInterval(r){return Number.isFinite(r)&&r>=0&&r<=1},parseNumberString(r){const t=r.trim();if(e.integerString.test(t))return Number(t);if(e.floatString.test(t))return Number(r)}});export{i as typeguardFactory};
