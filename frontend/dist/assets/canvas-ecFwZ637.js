const x=()=>({get2DContext(n){const t=n.getContext("2d");if(!t)throw new Error("2D canvas context is not available!");return t},getMousePosition(n,t){const o=n.getBoundingClientRect(),i=n.width/o.width,s=n.height/o.height;return{x:(t.clientX-o.left)*i,y:(t.clientY-o.top)*s}},isOverResizeHandle(n,t,o){const i=t.fontSize??32,s=t.fontWeight??"bold",h=t.fontFamily??"sans-serif";o.font=`${s} ${i}px ${h}`;const e=o.measureText(t.text).width,r=i,c=10,a=t.x+e/2-c/2,f=t.y+r/2-c/2;return n.x>=a&&n.x<=a+c&&n.y>=f&&n.y<=f+c},isPointInText(n,t,o){o.save();const i=t.fontSize??32,s=t.fontWeight??"bold",h=t.fontFamily??"sans-serif";o.font=`${s} ${i}px ${h}`;const e=o.measureText(t.text).width,r=i;return o.restore(),n.x>=t.x-e/2&&n.x<=t.x+e/2&&n.y>=t.y-r/2&&n.y<=t.y+r/2},mapBlendMode(n){return!n||n==="normal"?"source-over":n}});export{x as canvasHelpersFactory};
