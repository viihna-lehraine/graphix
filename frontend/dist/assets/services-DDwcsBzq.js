class g extends Error{constructor(r,e){super(r),this.userMessage=e,this.name="UserFacingError"}}const l={UserFacingError:g};class s{static#r=null;#o=l;#t;constructor(r){try{this.#t=r}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}static getInstance(r){try{return s.#r||(console.debug("No ErrorHandler instance exists yet. Creating new instance."),s.#r=new s(r)),console.debug("Returning ErrorHandler instance."),s.#r}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}handleAndReturn(r,e,n={}){try{const t=r();return t instanceof Promise?t.catch(o=>(this.#n(o,e,n),n.fallback??Promise.reject(o))):t}catch(t){return this.#n(t,e,n),n.fallback}}async handleAsync(r,e,n={}){try{return await r()}catch(t){throw this.#n(t,e,n),t}}handleSync(r,e,n={}){try{return r()}catch(t){throw this.#n(t,e,n),t}}#e(r,e,n){try{return r instanceof Error?`${e}: ${r.message}. Context: ${JSON.stringify(n)}`:`${e}: ${r}. Context: ${JSON.stringify(n)}`}catch(t){throw new Error(`[Error formatting error message: ${t instanceof Error?t.message:t}`)}}#n(r,e,n={}){try{const t=typeof n.context=="object"&&n.context!==null?n.context:{},o=this.#e(r,e,t);this.#t.error(o);const a=n.userMessage??(r instanceof this.#o.UserFacingError?r.userMessage:void 0);a&&alert(a)}catch(t){throw new Error(`Error handling error: ${t instanceof Error?t.message:t}`)}}}class c{static#r=null;constructor(r){try{r.app.noop()}catch(e){throw new Error(`constructor]: ${e instanceof Error?e.message:e}`)}}static getInstance(r){try{return c.#r||(c.#r=new c(r),console.log("No existing Logger instance found. Creating new instance.")),console.log("Returning Logger instance."),c.#r}catch(e){throw new Error(`${e instanceof Error?e.message:e}`)}}debug(r,e){this.#e(r,"debug",e)}error(r,e){this.#e(r,"error",e)}info(r,e){this.#e(r,"info",e)}warn(r,e){this.#e(r,"warn",e)}#o(){return new Date().toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1})}#t(r){switch(r){case"debug":return"color: green";case"info":return"color: blue";case"warn":return"color: orange";case"error":return"color: red";default:return"color: black"}}#e(r,e,n){const t=n,o=this.#o();try{console.log(`%c[${e.toUpperCase()}]%c ${o} [${t}] %c${r}`,this.#t(e),"color: gray","color: inherit")}catch(a){console.error(`[${n}.#logMessage]: Encountered an unexpected error: ${a}.`)}t==="Unknown caller"&&console.trace(`[${n}]: Full Stack Trace:`)}}function u(i){console.log("Starting service factory...");const r={};if(console.log("Initializing Logger, ErrorHandler, and StateManager services"),r.log=c.getInstance(i),r.errors=s.getInstance(r.log),!r.log||!r.errors)throw new Error("Logger and/or ErrorHandler failed to initialize.");return r}export{u as serviceFactory};
