const i=()=>({asBrandedFromString(r,n,t){const e=Number(r);if(!n(e))throw new Error(`String '${r}' does not match branded type.`);return t(e)},asFloat(r){if(!Number.isFinite(r)||Number.isInteger(r))throw new Error(`Value ${r} is not a float`);return r},asInteger(r){if(!Number.isInteger(r))throw new Error(`Value ${r} is not an integer.`);return r},asNonNegativeInteger(r){if(!Number.isInteger(r)||r<0)throw new Error(`Value ${r} is not a non-negative integer`);return r},asNonNegativeNumber(r){if(r<0)throw new Error(`Value ${r} is not a non-negative number`);return r},asNonZeroInteger(r){if(!Number.isInteger(r)||r===0)throw new Error(`Value ${r} is not a non-zero integer`);return r},asNonZeroNumber(r){if(r===0)throw new Error(`Value ${r} is not a non-zero number`);return r},asPercentile(r){if(!(r>=0&&r<=100))throw new Error(`Value ${r} is not a valid percentile`);return r},asPositiveInteger(r){if(!Number.isInteger(r)||r<=0)throw new Error(`Value ${r} is not a positive integer`);return r},asPositiveNumber(r){if(!(r>0))throw new Error(`Value ${r} is not a positive number`);return r},asSignedPercentile(r){if(!(r>=-100&&r<=100))throw new Error(`Value ${r} is not a valid signed percentile`);return r},asUnitInterval(r){if(!(r>=0&&r<=1))throw new Error(`Value ${r} is not a unit interval value`);return r}});export{i as brandFactory};
